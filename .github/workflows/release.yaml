name: Java Maven CI Pipeline

on:
  push:
    branches:
      - release

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from your repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Set up Java 21
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin" # or 'zulu', 'adopt', 'openjdk'
          java-version: "21"

      # Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Build the project
      - name: Build with Maven
        run: mvn clean compile

      # Run tests
      - name: Run tests with Maven
        run: mvn test

      # Package the project (skip tests in this step to avoid redundancy)
      - name: Package with Maven
        run: mvn package -DskipTests

      # Archive the JAR file as an artifact
      - name: Upload JAR file
        uses: actions/upload-artifact@v4
        with:
          name: springboot-app
          path: target/*.jar

      - name: conventional Changelog Action
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3.7.1
        with:
          github-token:
            ${{ secrets.GITHUB_TOKEN }}
            # skip-version-file: 'true'

      - name: create release
        uses: actions/create-release@v1
        id: create_release
        if: ${{ steps.changelog.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: target/notekeeper-0.0.1-SNAPSHOT.jar
          asset_name: application.jar
          asset_content_type: application/java-archive
        # publish docker image

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
