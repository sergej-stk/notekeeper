// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "proto/chat_service.proto" (package "pb", syntax proto3)
// tslint:disable
import { Empty } from "./utils";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message pb.ChatMessage
 */
export interface ChatMessage {
    /**
     * @generated from protobuf field: int32 room_id = 1;
     */
    roomId: number;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
}
/**
 * @generated from protobuf message pb.SendChatMessageRequest
 */
export interface SendChatMessageRequest {
    /**
     * TODO: find other solution for this, because room_id is a get parameter
     *
     * @generated from protobuf field: int32 room_id = 1;
     */
    roomId: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message pb.StartChatRequest
 */
export interface StartChatRequest {
    /**
     * @generated from protobuf field: repeated string usernames = 1;
     */
    usernames: string[];
}
/**
 * @generated from protobuf message pb.StartChatResponse
 */
export interface StartChatResponse {
    /**
     * @generated from protobuf field: int32 chat_room_id = 1;
     */
    chatRoomId: number;
    /**
     * @generated from protobuf field: repeated pb.ChatMessage messages = 2;
     */
    messages: ChatMessage[];
}
/**
 * @generated from protobuf message pb.GetAllChatMessagesRequest
 */
export interface GetAllChatMessagesRequest {
    /**
     * @generated from protobuf field: int32 room_id = 1;
     */
    roomId: number;
}
/**
 * @generated from protobuf message pb.GetAllChatMessagesResponse
 */
export interface GetAllChatMessagesResponse {
    /**
     * @generated from protobuf field: repeated pb.ChatMessage messages = 1;
     */
    messages: ChatMessage[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessage$Type extends MessageType<ChatMessage> {
    constructor() {
        super("pb.ChatMessage", [
            { no: 1, name: "room_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { email: true } } } },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<ChatMessage>): ChatMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roomId = 0;
        message.username = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ChatMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessage): ChatMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 room_id */ 1:
                    message.roomId = reader.int32();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 room_id = 1; */
        if (message.roomId !== 0)
            writer.tag(1, WireType.Varint).int32(message.roomId);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.ChatMessage
 */
export const ChatMessage = new ChatMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendChatMessageRequest$Type extends MessageType<SendChatMessageRequest> {
    constructor() {
        super("pb.SendChatMessageRequest", [
            { no: 1, name: "room_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "1" } } } }
        ]);
    }
    create(value?: PartialMessage<SendChatMessageRequest>): SendChatMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roomId = 0;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<SendChatMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendChatMessageRequest): SendChatMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 room_id */ 1:
                    message.roomId = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendChatMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 room_id = 1; */
        if (message.roomId !== 0)
            writer.tag(1, WireType.Varint).int32(message.roomId);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.SendChatMessageRequest
 */
export const SendChatMessageRequest = new SendChatMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartChatRequest$Type extends MessageType<StartChatRequest> {
    constructor() {
        super("pb.StartChatRequest", [
            { no: 1, name: "usernames", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { items: { string: { email: true } } } } } }
        ]);
    }
    create(value?: PartialMessage<StartChatRequest>): StartChatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.usernames = [];
        if (value !== undefined)
            reflectionMergePartial<StartChatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartChatRequest): StartChatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string usernames */ 1:
                    message.usernames.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartChatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string usernames = 1; */
        for (let i = 0; i < message.usernames.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.usernames[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.StartChatRequest
 */
export const StartChatRequest = new StartChatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartChatResponse$Type extends MessageType<StartChatResponse> {
    constructor() {
        super("pb.StartChatResponse", [
            { no: 1, name: "chat_room_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatMessage }
        ]);
    }
    create(value?: PartialMessage<StartChatResponse>): StartChatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatRoomId = 0;
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<StartChatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartChatResponse): StartChatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 chat_room_id */ 1:
                    message.chatRoomId = reader.int32();
                    break;
                case /* repeated pb.ChatMessage messages */ 2:
                    message.messages.push(ChatMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartChatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 chat_room_id = 1; */
        if (message.chatRoomId !== 0)
            writer.tag(1, WireType.Varint).int32(message.chatRoomId);
        /* repeated pb.ChatMessage messages = 2; */
        for (let i = 0; i < message.messages.length; i++)
            ChatMessage.internalBinaryWrite(message.messages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.StartChatResponse
 */
export const StartChatResponse = new StartChatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllChatMessagesRequest$Type extends MessageType<GetAllChatMessagesRequest> {
    constructor() {
        super("pb.GetAllChatMessagesRequest", [
            { no: 1, name: "room_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAllChatMessagesRequest>): GetAllChatMessagesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roomId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAllChatMessagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllChatMessagesRequest): GetAllChatMessagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 room_id */ 1:
                    message.roomId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllChatMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 room_id = 1; */
        if (message.roomId !== 0)
            writer.tag(1, WireType.Varint).int32(message.roomId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetAllChatMessagesRequest
 */
export const GetAllChatMessagesRequest = new GetAllChatMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllChatMessagesResponse$Type extends MessageType<GetAllChatMessagesResponse> {
    constructor() {
        super("pb.GetAllChatMessagesResponse", [
            { no: 1, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatMessage }
        ]);
    }
    create(value?: PartialMessage<GetAllChatMessagesResponse>): GetAllChatMessagesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<GetAllChatMessagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllChatMessagesResponse): GetAllChatMessagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated pb.ChatMessage messages */ 1:
                    message.messages.push(ChatMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllChatMessagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated pb.ChatMessage messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            ChatMessage.internalBinaryWrite(message.messages[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message pb.GetAllChatMessagesResponse
 */
export const GetAllChatMessagesResponse = new GetAllChatMessagesResponse$Type();
/**
 * @generated ServiceType for protobuf service pb.ChatApiService
 */
export const ChatApiService = new ServiceType("pb.ChatApiService", [
    { name: "StartChat", options: { "google.api.http": { post: "/api/v3/chat", body: "*" } }, I: StartChatRequest, O: StartChatResponse },
    { name: "SendChatMessage", options: { "google.api.http": { post: "/api/v3/chat/{room_id}", body: "*" } }, I: SendChatMessageRequest, O: Empty },
    { name: "getAllChatMessages", options: { "google.api.http": { get: "/api/v3/chat/{room_id}" } }, I: GetAllChatMessagesRequest, O: GetAllChatMessagesResponse }
]);
