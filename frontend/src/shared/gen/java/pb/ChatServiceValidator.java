// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/chat_service.proto

package pb;


@SuppressWarnings("all")
public class ChatServiceValidator {
	public static io.envoyproxy.pgv.ValidatorImpl validatorFor(Class clazz) {
		
		if (clazz.equals(pb.ChatService.ChatMessage.class)) return new ChatMessageValidator();
		if (clazz.equals(pb.ChatService.SendChatMessageRequest.class)) return new SendChatMessageRequestValidator();
		if (clazz.equals(pb.ChatService.StartChatRequest.class)) return new StartChatRequestValidator();
		if (clazz.equals(pb.ChatService.StartChatResponse.class)) return new StartChatResponseValidator();
		if (clazz.equals(pb.ChatService.GetAllChatMessagesRequest.class)) return new GetAllChatMessagesRequestValidator();
		if (clazz.equals(pb.ChatService.GetAllChatMessagesResponse.class)) return new GetAllChatMessagesResponseValidator();
		return null;
	}


/**
	 * Validates {@code ChatMessage} protobuf objects.
	 */
	public static class ChatMessageValidator implements io.envoyproxy.pgv.ValidatorImpl<pb.ChatService.ChatMessage> {
		
	
		
	
	
	

	public void assertValid(pb.ChatService.ChatMessage proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			io.envoyproxy.pgv.StringValidation.email(".pb.ChatMessage.username", proto.getUsername());
	
			io.envoyproxy.pgv.StringValidation.minLength(".pb.ChatMessage.message", proto.getMessage(), 1);
	
	
	}
}
/**
	 * Validates {@code SendChatMessageRequest} protobuf objects.
	 */
	public static class SendChatMessageRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<pb.ChatService.SendChatMessageRequest> {
		
	
		
	
	
	

	public void assertValid(pb.ChatService.SendChatMessageRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for RoomId

	
		if (proto.hasChatMessage()) {
			io.envoyproxy.pgv.RequiredValidation.required(".pb.SendChatMessageRequest.chat_message", proto.getChatMessage());
		} else {
			io.envoyproxy.pgv.RequiredValidation.required(".pb.SendChatMessageRequest.chat_message", null);
		};
			// Validate chat_message
			if (proto.hasChatMessage()) index.validatorFor(proto.getChatMessage()).assertValid(proto.getChatMessage());
	
	
	}
}
/**
	 * Validates {@code StartChatRequest} protobuf objects.
	 */
	public static class StartChatRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<pb.ChatService.StartChatRequest> {
		
	
	
	

	public void assertValid(pb.ChatService.StartChatRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getUsernamesList(), item -> {
				
			io.envoyproxy.pgv.StringValidation.email(".pb.StartChatRequest.usernames", item);
			});
	
	
	}
}
/**
	 * Validates {@code StartChatResponse} protobuf objects.
	 */
	public static class StartChatResponseValidator implements io.envoyproxy.pgv.ValidatorImpl<pb.ChatService.StartChatResponse> {
		
	
		
	
	
	

	public void assertValid(pb.ChatService.StartChatResponse proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for ChatRoomId

	
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getMessagesList(), item -> {
				
			// Validate messages
			if (true) index.validatorFor(item).assertValid(item);
			});
	
	
	}
}
/**
	 * Validates {@code GetAllChatMessagesRequest} protobuf objects.
	 */
	public static class GetAllChatMessagesRequestValidator implements io.envoyproxy.pgv.ValidatorImpl<pb.ChatService.GetAllChatMessagesRequest> {
		
	
	
	

	public void assertValid(pb.ChatService.GetAllChatMessagesRequest proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	// no validation rules for RoomId

	
	
	}
}
/**
	 * Validates {@code GetAllChatMessagesResponse} protobuf objects.
	 */
	public static class GetAllChatMessagesResponseValidator implements io.envoyproxy.pgv.ValidatorImpl<pb.ChatService.GetAllChatMessagesResponse> {
		
	
	
	

	public void assertValid(pb.ChatService.GetAllChatMessagesResponse proto, io.envoyproxy.pgv.ValidatorIndex index) throws io.envoyproxy.pgv.ValidationException {
	
			io.envoyproxy.pgv.RepeatedValidation.forEach(proto.getMessagesList(), item -> {
				
			// Validate messages
			if (true) index.validatorFor(item).assertValid(item);
			});
	
	
	}
}
}

