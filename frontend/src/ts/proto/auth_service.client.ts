// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "proto/auth_service.proto" (package "pb", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DeviceService } from "./auth_service";
import type { RegisterRequest } from "./auth_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Session } from "./auth_service";
import type { LoginRequest } from "./auth_service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service pb.DeviceService
 */
export interface IDeviceServiceClient {
    /**
     * List all registered devices
     *
     * @generated from protobuf rpc: Login(pb.LoginRequest) returns (pb.Session);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, Session>;
    /**
     * register
     *
     * @generated from protobuf rpc: Register(pb.RegisterRequest) returns (pb.Session);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, Session>;
}
/**
 * @generated from protobuf service pb.DeviceService
 */
export class DeviceServiceClient implements IDeviceServiceClient, ServiceInfo {
    typeName = DeviceService.typeName;
    methods = DeviceService.methods;
    options = DeviceService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * List all registered devices
     *
     * @generated from protobuf rpc: Login(pb.LoginRequest) returns (pb.Session);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, Session> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, Session>("unary", this._transport, method, opt, input);
    }
    /**
     * register
     *
     * @generated from protobuf rpc: Register(pb.RegisterRequest) returns (pb.Session);
     */
    register(input: RegisterRequest, options?: RpcOptions): UnaryCall<RegisterRequest, Session> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterRequest, Session>("unary", this._transport, method, opt, input);
    }
}
