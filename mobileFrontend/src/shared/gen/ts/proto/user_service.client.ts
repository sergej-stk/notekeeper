// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "proto/user_service.proto" (package "pb", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserApiService } from "./user_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetMeResponse } from "./user_service";
import type { Empty } from "./utils";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service pb.UserApiService
 */
export interface IUserApiServiceClient {
  /**
   * get
   *
   * @generated from protobuf rpc: getMe(pb.Empty) returns (pb.GetMeResponse);
   */
  getMe(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetMeResponse>;
}
/**
 * @generated from protobuf service pb.UserApiService
 */
export class UserApiServiceClient
  implements IUserApiServiceClient, ServiceInfo
{
  typeName = UserApiService.typeName;
  methods = UserApiService.methods;
  options = UserApiService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * get
   *
   * @generated from protobuf rpc: getMe(pb.Empty) returns (pb.GetMeResponse);
   */
  getMe(input: Empty, options?: RpcOptions): UnaryCall<Empty, GetMeResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<Empty, GetMeResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
}
