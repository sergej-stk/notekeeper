// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "proto/user_service.proto" (package "pb", syntax proto3)
// tslint:disable
import { Empty } from "./utils";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message pb.Me
 */
export interface Me {
  /**
   * @generated from protobuf field: string username = 1;
   */
  username: string;
  /**
   * @generated from protobuf field: string fullName = 2;
   */
  fullName: string;
}
/**
 * @generated from protobuf message pb.GetMeResponse
 */
export interface GetMeResponse {
  /**
   * @generated from protobuf field: pb.Me me = 1;
   */
  me?: Me;
}
// @generated message type with reflection information, may provide speed optimized methods
class Me$Type extends MessageType<Me> {
  constructor() {
    super("pb.Me", [
      { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "fullName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<Me>): Me {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.username = "";
    message.fullName = "";
    if (value !== undefined) reflectionMergePartial<Me>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: Me,
  ): Me {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string username */ 1:
          message.username = reader.string();
          break;
        case /* string fullName */ 2:
          message.fullName = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: Me,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string username = 1; */
    if (message.username !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.username);
    /* string fullName = 2; */
    if (message.fullName !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.fullName);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message pb.Me
 */
export const Me = new Me$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMeResponse$Type extends MessageType<GetMeResponse> {
  constructor() {
    super("pb.GetMeResponse", [
      { no: 1, name: "me", kind: "message", T: () => Me },
    ]);
  }
  create(value?: PartialMessage<GetMeResponse>): GetMeResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetMeResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetMeResponse,
  ): GetMeResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* pb.Me me */ 1:
          message.me = Me.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.me,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetMeResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* pb.Me me = 1; */
    if (message.me)
      Me.internalBinaryWrite(
        message.me,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message pb.GetMeResponse
 */
export const GetMeResponse = new GetMeResponse$Type();
/**
 * @generated ServiceType for protobuf service pb.UserApiService
 */
export const UserApiService = new ServiceType("pb.UserApiService", [
  {
    name: "getMe",
    options: { "google.api.http": { get: "/api/v3/me" } },
    I: Empty,
    O: GetMeResponse,
  },
]);
